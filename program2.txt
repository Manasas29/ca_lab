2]
#include <stdio.h>
#include <omp.h>
#define ARRAY_SIZE 100
#define TARGET 42
int binary_search(int arr[], int left, int right, int target)
{ 
while (left <= right) 
{
int mid = left + (right - left) / 2; 
if (arr[mid] == target) // Check if target is present at mid
return mid; 
if (arr[mid] < target) // If target greater, ignore left half
left = mid + 1; 
else // If target is smaller, ignore right half
right = mid - 1;
} 
return -1; // Target element is not present in the array
} 
int main()
{
int arr[ARRAY_SIZE]; 
int i, result = -1; 
for (i = 0; i < ARRAY_SIZE; ++i) // Initialize sorted array
{ 
arr[i] = i;
} 
// Parallel region for binary search
#pragma omp parallel shared(arr, result)
{ 
int tid = omp_get_thread_num(); 
int num_threads = omp_get_num_threads(); 
int chunk_size = ARRAY_SIZE / num_threads; // Calculate bounds for each thread
int left = tid * chunk_size; 
int right = (tid == num_threads - 1) ? ARRAY_SIZE - 1 : (tid + 1) * chunk_size - 1; 
// Perform binary search within thread's bounds
int local_result = binary_search(arr, left, right, TARGET); 
// Use reduction to find global result (if found)
#pragma omp critical
{
if (local_result != -1 && result == -1) 
result = local_result; 
} 
} 
// Output the result
if (result != -1) 
printf("Element %d found at index %d.\n", TARGET, result); 
else
printf("Element %d not found in the array.\n", TARGET); 
return 0; 
}